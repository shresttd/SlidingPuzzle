package edu.wm.cs.cs301.slidingpuzzle;

import java.math.*;
import java.util.Arrays;
import java.util.Random;

public class SimplePuzzleState implements PuzzleState {
	
	int [][] board;
	int face;
	int dimension = 4;
	
	SimplePuzzleState parent;
    SimplePuzzleState newState;

		
	Operation operation; 
	
	int pathLength;   
	
	public SimplePuzzleState() {
		// TODO Auto-generated constructor stub
	}
	
	public SimplePuzzleState(SimplePuzzleState parent, Operation operation, int pathLength){     //constructor
		this.board = new int[dimension][dimension]; ///could be problem
		
		this.parent = parent;
		this.operation = operation;
		this.pathLength = pathLength + 1;
		
       
        
        //for (i = 0; i < 1 /*Operation.values().length*/; i++){
        //randomOperation = Operation.values()[random.nextInt(Operation.values().length)];
        //}
		//System.out.println(randomOperation);


	}	
		
	@Override
	public void setToInitialState(int dimension, int numberOfEmptySlots) {      //just use { { 1, 2, 3, 4}. {5,6,7,8} }?
		
		this.parent = null;
		this.operation = null;
		this.pathLength = 0;
		
		this.board = new int[dimension][dimension];
		
	    int rows;
	    int columns;
	    if (numberOfEmptySlots == 1) {
	        for (rows = 0; rows < dimension; rows++) {  //might have to do row.intValue() < dimension
	    	    for (columns = 0; columns < dimension; columns++) {
	    	    	if (rows == dimension - 1 && columns == dimension -1){  //1 empty slot
	    		    	this.face = 0;
	    	    	}else{
	    	    	    this.face = rows * dimension + columns + 1;  
	        	    }
    		    	this.board[rows][columns] = this.face;
	        	}
	        }
	        
	    }else if (numberOfEmptySlots == 2) {
	    	for (rows = 0; rows < dimension; rows++) {  //might have to do row.intValue() < dimension
	    	    for (columns = 0; columns < dimension; columns++) {
	    	    	if (rows == dimension - 1 && (columns == dimension -1 || columns == dimension - 2)){  //last two empty slots
	    		    	this.face = 0;
	    	    	}else{
	    	    	    this.face = rows * dimension + columns + 1;    		
	        	    }
    		    	this.board[rows][columns] = this.face;
	        	}
	        }
	    	
	    }else if (numberOfEmptySlots == 3) {
	    	for (rows = 0; rows < dimension; rows++) {
	    		for (columns = 0; columns < dimension; columns++) {
	    			if (rows == dimension - 1 && (columns == dimension - 1 || columns == dimension - 2 || columns == dimension - 3)){
	    				this.face = 0;
	    			}else{
	    				this.face = rows * dimension + columns + 1;
	    			}
    		    	board[rows][columns] = this.face;
	    		}
	    	}
	    }else{
	    	return;  //if numberOfEmptySlots is anything else
	    }
	// TODO Auto-generated method stub

	} 
	
	/*@Override
	public void setToInitialState(int dimension, int numberOfEmptySlots) {      //just use { { 1, 2, 3, 4}. {5,6,7,8} }?
		
		this.parent = null;
		this.operation = null;
		this.pathLength = 0;
		
	    if (numberOfEmptySlots == 1) {
	    	board = new int[][] { {1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 0} };
	  
	        
	    }else if (numberOfEmptySlots == 2) {
	    	board = new int[][] { {1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 0, 0} };

	    	
	    }else if (numberOfEmptySlots == 3) {
	    	board = new int[][] { {1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 0, 0, 0} };

	    }else{
	    	return;  //if numberOfEmptySlots is anything else
	    }
	// TODO Auto-generated method stub

	}*/
	
	@Override
	public int getValue(int row, int column) {
		// TODO Auto-generated method stub
		return this.board[row][column];
	}

	@Override
	public PuzzleState getParent() {    
		// TODO Auto-generated method stub
		return this.parent;
	}

	@Override
	public Operation getOperation() {
		// TODO Auto-generated method stub
		//return null;
		return this.operation;

	}

	@Override
	public int getPathLength() {
		// TODO Auto-generated method stub
		return this.pathLength;
	}

	public PuzzleState move(int row, int column, Operation op) {
		// TODO Auto-generated method stub
		        
		if (op == PuzzleState.Operation.MOVERIGHT){
			
		    int rightNeighborRow = row;
		    int rightNeighborColumn = column + 1;
		    
	        if (insideBoard(rightNeighborRow, rightNeighborColumn) && isEmpty(rightNeighborRow, rightNeighborColumn)){  //right
					   
			    newState = new SimplePuzzleState(this, op, pathLength); 
                
			    newState.setToParentState(this);
			    
			    newState.moveToEmptyTile(row, column, rightNeighborRow, rightNeighborColumn);
			    
			   /* int r;
				int c;
				for (r = 0; r < dimension; r++){
					for (c = 0; c < dimension; c++){
						//newState.face = this.face;
						newState.board[r][c] = this.face;
					}
				}*/
				//newState.moveToEmptyTile(row, column, emptyNeighborRow, emptyNeighborColumn);				
				    	
		    }else{
			    return null;
		    }
				    
		}else if (op == PuzzleState.Operation.MOVELEFT){
			int leftNeighborRow = row;
		    int leftNeighborColumn = column - 1;
		    
			if ( insideBoard (leftNeighborRow, leftNeighborColumn) && isEmpty(leftNeighborRow, leftNeighborColumn)){ //left
				
				newState = new SimplePuzzleState(this, op, pathLength);
			    newState.setToParentState(this);
			    newState.moveToEmptyTile(row, column, leftNeighborRow, leftNeighborColumn);


			    /*int r;
				int c;
				for (r = 0; r < dimension; r++){
					for (c = 0; c < dimension; c++){
						//newState.face = this.face;
						newState.board[r][c] = this.face;
					}
				}*/
				
				//newState.moveToEmptyTile(row, column, emptyNeighborRow, emptyNeighborColumn);				
				
			}else{
				return null;
			}
				    
		}else if (op == PuzzleState.Operation.MOVEUP){	

		    int topNeighborRow = row - 1;
		    int topNeighborColumn = column;
		    
			if ( insideBoard(topNeighborRow, topNeighborColumn) && isEmpty(topNeighborRow, topNeighborColumn)){  //up
		        
				newState = new SimplePuzzleState(this, op, pathLength);
			    newState.setToParentState(this);
			    newState.moveToEmptyTile(row, column, topNeighborRow, topNeighborColumn);


				/*int r;
				int c;
				for (r = 0; r < dimension; r++){
					for (c = 0; c < dimension; c++){
						
						//newState.face = this.face;
						newState.board[r][c] = this.face;
					}
				}
				
				//newState.moveToEmptyTile(row, column, emptyNeighborRow, emptyNeighborColumn);*/				

			}else{
				return null;
			}
				
		}else if (op == PuzzleState.Operation.MOVEDOWN){
			
			int bottomNeighborRow = row + 1;
		    int bottomNeighborColumn = column;
		    
			if ( insideBoard(bottomNeighborRow, bottomNeighborColumn) && isEmpty(bottomNeighborRow, bottomNeighborColumn)) {  //down

				newState = new SimplePuzzleState(this, op, pathLength);			    
			    newState.setToParentState(this);
			    newState.moveToEmptyTile(row, column, bottomNeighborRow, bottomNeighborColumn);


				/*int r;
				int c;
				
				for (r = 0; r < dimension; r++){
					for (c = 0; c < dimension; c++){
						//newState.face = this.face;
						newState.board[r][c] = this.face;
					}
				}*/
				
				//newState.moveToEmptyTile(row, column, emptyNeighborRow, emptyNeighborColumn);				
				
			}else{
				return null;
			}  
		}
		return newState;
	}
	
	@Override
	public PuzzleState flip(int startRow, int startColumn, int endRow, int endColumn) {
		// TODO Auto-generated method stub
		
		/*if (isAdjacent)
		    this.move(startRow, startColumn, MOVERIGHT)
		elif (isAdjacent2)
		
		elif (isAdjacent3)
		
		*/
		return null;
	}

	@Override
	/*public PuzzleState shuffleBoard(int pathLength) {
		// TODO Auto-generated method stub
		
		SimplePuzzleState randomizedState;
		randomizedState = new SimplePuzzleState();
		
		int i;
		for (i = 0; i <= pathLength; i++){
		    randomizedState.randomizeBoard();
		}
		
		return randomizedState;
	}*/
	
	public PuzzleState shuffleBoard(int pathLength) {

		SimplePuzzleState randomizedState;
		randomizedState = new SimplePuzzleState();
		
		int i;		
        for (i = 0; i < pathLength; i++) {
        	randomizedState.randomizeBoard();
        	
        }
        return randomizedState;
	}

	@Override
	public boolean isEmpty(int row, int column) {
		// TODO Auto-generated method stub		
		return this.board[row][column] == 0;
	}

	@Override
	public PuzzleState getStateWithShortestPath() {
		// TODO Auto-generated method stub
		return null;
	}
	
    public boolean equals(SimplePuzzleState state){    	
    	
    	if (this == state) {
    		return true;
    	}
    	
    	else if (state == null) {
    		return false;
    	}
    	
    	else if (!(state instanceof PuzzleState)) {        /// Example vs Object?
    		return false;
    	}
    	
    	/*Example other = (Example) obj;        //subclasses of Example should be okay here aswell 
    	 * if (Double.doubleToLongBits(myDouble) != (Double.doubleTOLongBits(other.myDouble)) {
    	 *     return false;
    	 }
    	 
    	 myInt != other.myInt*/
    	
    	else if (state.face == face){
    		return true;
    	}
    	
    	else if ( this.compareEachTile(state) ) {
    		return true;
    		
    	}else if (Arrays.deepEquals(this.board, state.board)) {
    		return true;
    	}
    		
    	
    	SimplePuzzleState other = (SimplePuzzleState) state;
    	return this.face == other.face;
    	
    	/*SimplePuzzleState other = (SimplePuzzleState) state;
    	return new EqualsBuilder()
    			.append(face, other.face)
    			.isEquals();*/
    					
    	
    	
    	
		//return false;
	}  
	
	public int hashCode(){
		//return Array.hashcode(this.face);
		return (int) this.face;      //ya?         // Array.hashcode(myObject)
	}
	
	private boolean insideBoard(int row, int column){
		return row >= 0 && row < dimension && column >= 0 && column < dimension;
	}
	
	private void moveToEmptyTile(int row, int column, int neighborRow, int neighborColumn){
		int temp = this.board[row][column];
		this.board[row][column] = this.board[neighborRow][neighborColumn];
		this.board[neighborRow][neighborColumn] = temp;
	}
	
	private void setToParentState(SimplePuzzleState parent){        
		int r;
		int c;
		
		for (r = 0; r < dimension; r++) {
			for(c = 0; c < dimension; c++) {
				this.board[r][c] = parent.board[r][c];
			}
		}	
	}
	
	private boolean compareEachTile(SimplePuzzleState state){
		int row;
	    int column;
	
	    for (row = 0; row < dimension; row++){
	    	for(column = 0; column < dimension; column++){
	    		/*if (this.board[row][column] == state.board[row][column]) {*/
	    		if (this.getValue(row, column) == state.getValue(row,  column)) {
	    			return true;
	    		}
	       	}
	    }
	    return false;
	}
	
	/*private void randomizeBoard() {
		int row;
		int column;
		
		int randomRow;
		int randomColumn;
		
		
		for (row = 0; row < dimension; row++) {
			for (column = 0; column < dimension; column++) {
				
				if (hasEmptyNeighbor(row, column)){

				    randomRow = (int) Math.random() * dimension;
				    randomColumn = (int) Math.random() * dimension;
				
			    	while ( !(insideBoard(randomRow,randomColumn) && isEmpty(randomRow, randomColumn) ) ); {
				    	//System.out.println("LOL");
				    	randomRow = (int) Math.random() * dimension;
				    	randomColumn = (int) Math.random() * dimension;
				    }
				
				this.moveToEmptyTile(row, column, (randomRow), (randomColumn));
		        }
	        }
		}
	}*/
	
	private void randomizeBoard(){
		
		/*int row;
		int column;*/
		
		Operation randomOperation;		
        Random random;

		randomOperation = null; 
		random = new Random();
        
        randomOperation = Operation.values()[random.nextInt(Operation.values().length)];
        
        int rows [] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3 };
        int columns [] = {0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3 };
        
        int indexRows = 0;
        int indexColumns = 0;
        
        while (! (hasEmptyNeighbor(rows[indexRows], columns[indexColumns]) ) ){
        	indexRows += 1;
        	indexColumns += 1;
        }
        
        while (this.move(rows[indexRows], columns[indexColumns], randomOperation) == null ) {
    		randomOperation = Operation.values()[random.nextInt(Operation.values().length)];      
        }	
        	
	    /*for (row = 0; row < dimension; row++) {
	    	for (column = 0; column < dimension; column++) {
	    		if (hasEmptyNeighbor( row, column)){	    		
	    			while (this.move(row, column, randomOperation) == null ) {
	    			randomOperation = Operation.values()[random.nextInt(Operation.values().length)];
	    			}
	    		}else{ //no empty neighbor
	    			//move to next tile
	    		}
		    }
	    }*/
	}
	
	private boolean hasEmptyNeighbor(int row, int column){
	    int rightNeighborRow = row;
	    int rightNeighborColumn = column + 1;
	    
	    int leftNeighborRow = row;
	    int leftNeighborColumn = column - 1;
	    
	    int topNeighborRow = row - 1;
	    int topNeighborColumn = column;
		
		int bottomNeighborRow = row + 1;
	    int bottomNeighborColumn = column;
	    
        if (insideBoard(rightNeighborRow, rightNeighborColumn) && isEmpty(rightNeighborRow, rightNeighborColumn)) {
        	return true;
        }else if (insideBoard(leftNeighborRow, leftNeighborColumn) && isEmpty(leftNeighborRow, leftNeighborColumn)) {
        	return true;
        }else if (insideBoard(topNeighborRow, topNeighborColumn) && isEmpty(topNeighborRow, topNeighborColumn)) {
        	return true;
        }else if (insideBoard(bottomNeighborRow, bottomNeighborColumn) && isEmpty(bottomNeighborRow, bottomNeighborColumn)) {
        	return true;
        }
	    return false;
	}
}



