package edu.wm.cs.cs301.slidingpuzzle;

public class SimplePuzzleState implements PuzzleState {
	
	int [][] board;
	int face;
	int dimension = 4;
	
	SimplePuzzleState parent;
    SimplePuzzleState newState;

		
	Operation operation; 
	
	int pathLength;   
	
	public SimplePuzzleState() {
		// TODO Auto-generated constructor stub
	}
	
	public SimplePuzzleState(SimplePuzzleState parent, Operation operation, int pathLength){     //constructor
		this.board = new int[dimension][dimension]; ///could be problem
		
		this.parent = parent;
		this.operation = operation;
		this.pathLength = pathLength + 1;	
		//System.out.println("press button");
	}	
		
	@Override
	public void setToInitialState(int dimension, int numberOfEmptySlots) {      //just use { { 1, 2, 3, 4}. {5,6,7,8} }?
		
		this.parent = null;
		this.operation = null;
		this.pathLength = 0;
		
		this.board = new int[dimension][dimension];
		
	    int rows;
	    int columns;
	    if (numberOfEmptySlots == 1) {
	        for (rows = 0; rows < dimension; rows++) {  //might have to do row.intValue() < dimension
	    	    for (columns = 0; columns < dimension; columns++) {
	    	    	if (rows == dimension - 1 && columns == dimension -1){  //1 empty slot
	    		    	this.face = 0;
	    	    	}else{
	    	    	    this.face = rows * dimension + columns + 1;  
	        	    }
    		    	this.board[rows][columns] = this.face;
	        	}
	        }
	        
	    }else if (numberOfEmptySlots == 2) {
	    	for (rows = 0; rows < dimension; rows++) {  //might have to do row.intValue() < dimension
	    	    for (columns = 0; columns < dimension; columns++) {
	    	    	if (rows == dimension - 1 && (columns == dimension -1 || columns == dimension - 2)){  //last two empty slots
	    		    	this.face = 0;
	    	    	}else{
	    	    	    this.face = rows * dimension + columns + 1;    		
	        	    }
    		    	this.board[rows][columns] = this.face;
	        	}
	        }
	    	
	    }else if (numberOfEmptySlots == 3) {
	    	for (rows = 0; rows < dimension; rows++) {
	    		for (columns = 0; columns < dimension; columns++) {
	    			if (rows == dimension - 1 && (columns == dimension - 1 || columns == dimension - 2 || columns == dimension - 3)){
	    				this.face = 0;
	    			}else{
	    				this.face = rows * dimension + columns + 1;
	    			}
    		    	board[rows][columns] = this.face;
	    		}
	    	}
	    }else{
	    	return;  //if numberOfEmptySlots is anything else
	    }
	// TODO Auto-generated method stub

	}
	

	@Override
	public int getValue(int row, int column) {
		// TODO Auto-generated method stub
		return this.board[row][column];
	}

	@Override
	public PuzzleState getParent() {    
		// TODO Auto-generated method stub
		return this.parent;
	}

	@Override
	public Operation getOperation() {
		// TODO Auto-generated method stub
		//return null;
		return this.operation;

	}

	@Override
	public int getPathLength() {
		// TODO Auto-generated method stub
		return this.pathLength;
	}

	public PuzzleState move(int row, int column, Operation op) {
		// TODO Auto-generated method stub
		        
		if (op == PuzzleState.Operation.MOVERIGHT){
			
		    int rightNeighborRow = row;
		    int rightNeighborColumn = column + 1;
		    
	        if (insideBoard(rightNeighborRow, rightNeighborColumn) && isEmpty(rightNeighborRow, rightNeighborColumn)){  //right
					   
			    newState = new SimplePuzzleState(this, op, pathLength); 
                
			    newState.setToParentState(this);
			    
			    newState.moveToEmptyTile(row, column, rightNeighborRow, rightNeighborColumn);
			    
			   /* int r;
				int c;
				for (r = 0; r < dimension; r++){
					for (c = 0; c < dimension; c++){
						//newState.face = this.face;
						newState.board[r][c] = this.face;
					}
				}*/
				//newState.moveToEmptyTile(row, column, emptyNeighborRow, emptyNeighborColumn);				
				    	
		    }else{
			    return null;
		    }
				    
		}else if (op == PuzzleState.Operation.MOVELEFT){
			int leftNeighborRow = row;
		    int leftNeighborColumn = column - 1;
		    
			if ( insideBoard (leftNeighborRow, leftNeighborColumn) && isEmpty(leftNeighborRow, leftNeighborColumn)){ //left
				
				newState = new SimplePuzzleState(this, op, pathLength);
			    newState.setToParentState(this);
			    newState.moveToEmptyTile(row, column, leftNeighborRow, leftNeighborColumn);


			    /*int r;
				int c;
				for (r = 0; r < dimension; r++){
					for (c = 0; c < dimension; c++){
						//newState.face = this.face;
						newState.board[r][c] = this.face;
					}
				}*/
				
				//newState.moveToEmptyTile(row, column, emptyNeighborRow, emptyNeighborColumn);				
				
			}else{
				return null;
			}
				    
		}else if (op == PuzzleState.Operation.MOVEUP){	

		    int topNeighborRow = row - 1;
		    int topNeighborColumn = column;
		    
			if ( insideBoard(topNeighborRow, topNeighborColumn) && isEmpty(topNeighborRow, topNeighborColumn)){  //up
		        
				newState = new SimplePuzzleState(this, op, pathLength);
			    newState.setToParentState(this);
			    newState.moveToEmptyTile(row, column, topNeighborRow, topNeighborColumn);


				/*int r;
				int c;
				for (r = 0; r < dimension; r++){
					for (c = 0; c < dimension; c++){
						
						//newState.face = this.face;
						newState.board[r][c] = this.face;
					}
				}
				
				//newState.moveToEmptyTile(row, column, emptyNeighborRow, emptyNeighborColumn);*/				

			}else{
				return null;
			}
				
		}else if (op == PuzzleState.Operation.MOVEDOWN){
			
			int bottomNeighborRow = row + 1;
		    int bottomNeighborColumn = column;
		    
			if ( insideBoard(bottomNeighborRow, bottomNeighborColumn) && isEmpty(bottomNeighborRow, bottomNeighborColumn)) {  //down

				newState = new SimplePuzzleState(this, op, pathLength);			    
			    newState.setToParentState(this);
			    newState.moveToEmptyTile(row, column, bottomNeighborRow, bottomNeighborColumn);


				/*int r;
				int c;
				
				for (r = 0; r < dimension; r++){
					for (c = 0; c < dimension; c++){
						//newState.face = this.face;
						newState.board[r][c] = this.face;
					}
				}*/
				
				//newState.moveToEmptyTile(row, column, emptyNeighborRow, emptyNeighborColumn);				
				
			}else{
				return null;
			}  
		}
		return newState;
	}
	
	@Override
	public PuzzleState flip(int startRow, int startColumn, int endRow, int endColumn) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public PuzzleState shuffleBoard(int pathLength) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isEmpty(int row, int column) {
		// TODO Auto-generated method stub		
		return board[row][column] == 0;
	}

	@Override
	public PuzzleState getStateWithShortestPath() {
		// TODO Auto-generated method stub
		return null;
	}
	
    public boolean equals(SimplePuzzleState state){
		
    	if (this == state) {
    		return true;
    	}
    	
    	if (state == null) {
    		return false;
    	}
    	
    	if (!(state instanceof PuzzleState)) {        /// Example vs Object?
    		return false;
    	}
    	
    	/*Example other = (Example) obj;        //subclasses of Example should be okay here aswell 
    	 * if (Double.doubleToLongBits(myDouble) != (Double.doubleTOLongBits(other.myDouble)) {
    	 *     return false;
    	 }
    	 
    	 myInt != other.myInt*/
    	
    	int row;
		int column;
		
		for (row = 0; row < dimension; row++){
			for(column = 0; column < dimension; column++){
				if (board[row][column] == state.board[row][column]){
					return true;
				}
			}
		}
		return false;
	}  
	
	public int hashCode(){
		return face;      //ya?         // Array.hashcode(myObject)
	}
	
	private boolean insideBoard(int row, int column){
		return row >= 0 && row < dimension && column >= 0 && column < dimension;
	}
	
	private void moveToEmptyTile(int row, int column, int neighborRow, int neighborColumn){
		int temp = this.board[row][column];
		this.board[row][column] = this.board[neighborRow][neighborColumn];
		this.board[neighborRow][neighborColumn] = temp;
	}
	
	private void setToParentState(SimplePuzzleState parent){        
		int r;
		int c;
		
		for (r = 0; r < dimension; r++) {
			for(c = 0; c < dimension; c++) {
				this.board[r][c] = parent.board[r][c];
			}
		}	
	}


}



