package edu.wm.cs.cs301.slidingpuzzle;

public class SimplePuzzleState implements PuzzleState {
	
	/*private class Board{
		
	    private class Tile {
			
		    private Integer row;
		    private Integer column;
		    private String face; //something else.
		
	    	public Tile(Integer r, Integer c, String f) {
	    		row = r;
	    		column = c;
	    		face = f;			
	    	}
	    }
	    
		private Tile[][] board;
		private Tile[][] prev;
		private Tile[][] next;
		public Board(){ 
			board = new Tile[4][4];
			newBoard();
			
			this.prev = null;
			this.next = null;
					
		}
		
		public void newBoard(){
			Integer r;
			Integer c;
			String f;

			for (r = 0; r < 4; r++){
				for (c = 0; c < 4; c++){
					board[r][c] = new Tile(r, c, f);
				}
			}
		}
	
	}
	
	Board state;
	private Board header;
	private Board trailer;
	
	public SimplePuzzleState() { 
		this.header = new Board();
		this.trailer = new Board();
		state = new Board();
		
		this.header.next = state;
		state.next = this.trailer.next;
		
		
		
		// TODO constructor
		
				
	}
	
	private class Tile{
		private Integer row;
		private Integer column;
		
		public Tile(){
			
		}
	}*/
	
	int [][] board;
	int face;
	int dimension;
	int numberOfEmptySlots;
	SimplePuzzleState parent;
	SimplePuzzleState currentState;
	SimplePuzzleState newState;
	
	Operation MOVERIGHT;
	Operation MOVELEFT;
	Operation MOVEUP;
	Operation MOVEDOWN;
	
	int pathLength;	
	
	public SimplePuzzleState(){     //constructor
		board = new int[dimension][dimension];
		pathLength = 0;
	}	
		

	/*public enum Operation{ MOVERIGHT, MOVELEFT, MOVEUP, MOVEDOWN }{
		int rows;
		int columns;
		
		for (rows = 0; rows < dimension; rows++){
			for (columns = 0; columns < dimension; columns++){
				//if (board.isEmpty(rows, columns + 1)) {  //gives error
				if (board[rows][columns + 1] == 0){
					return MOVERIGHT;
					
				}else if (board[rows][columns - 1] == 0){
					return MOVELEFT;
				}else if (board[rows - 1][columns] == 0){
					return MOVEUP;
				}else if (board[rows + 1][columns] == 0){
					return MOVEDOWN;
				}else{   //anything else;
					return;
				}
		    }
		}
	}
	
	/*public enum Operation{ MOVERIGHT, MOVELEFT, MOVEUP, MOVEDOWN }{
		int something = 0;
		switch(something) {

		}
	}*/
	
	
	@Override
	public void setToInitialState(int dimension, int numberOfEmptySlots) {  
		parent = null;
		//operation = null;
		
	    int rows;
	    int columns;
	    if (numberOfEmptySlots == 1) {
	        for (rows = 0; rows < dimension; rows++) {  //might have to do row.intValue() < dimension
	    	    for (columns = 0; columns < dimension; columns++) {
	    	    	if (rows == dimension - 1 && columns == dimension -1){  //1 empty slot
	    		    	face = 0;
	    		    
	    	    	}else{
	    	    	    face = rows * dimension + columns + 1;   
	        	    }
    		    	board[rows][columns] = face;
	        	}
	        }
	    }else if (numberOfEmptySlots == 2) {
	    	for (rows = 0; rows < dimension; rows++) {  //might have to do row.intValue() < dimension
	    	    for (columns = 0; columns < dimension; columns++) {
	    	    	if (rows == dimension - 1 && (columns == dimension -1 || columns == dimension - 2)){  //last two empty slots
	    		    	face = 0;
	    	    	}else{
	    	    	    face = rows * dimension + columns + 1;    		
	        	    }
    		    	board[rows][columns] = face;
	        	}
	        }
	    }else if (numberOfEmptySlots == 3) {
	    	for (rows = 0; rows < dimension; rows++) {
	    		for (columns = 0; columns < dimension; columns++) {
	    			if (rows == dimension - 1 && (columns == dimension - 1 || columns == dimension -2 || columns == dimension - 3)){
	    				face = 0;
	    			}else{
	    				face = rows * dimension + columns + 1;
	    			}
    		    	board[rows][columns] = face;
	    		}
	    	}
	    }else{
	    	return;  //if numberOfEmptySlots is anything else
	    }
	// TODO Auto-generated method stub

	}
	

	@Override
	public int getValue(int row, int column) {
		// TODO Auto-generated method stub
		return board[row][column];
	}

	@Override
	public PuzzleState getParent() {    
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Operation getOperation() {
		// TODO Auto-generated method stub
		return null;
		//return parent;

	}

	@Override
	public int getPathLength() {
		// TODO Auto-generated method stub
		return pathLength;
	}

	@Override
	public PuzzleState move(int row, int column, Operation op) {
		// TODO Auto-generated method stub
		for (row = 0; row < dimension; row++) {
			for (column = 0; column < dimension; column++) {
				if (board[row][column + 1] == 0){  //right
					if (op == MOVERIGHT){
					    parent = this;
					    MOVERIGHT = op;
						newState = new SimplePuzzleState();  //parent?
						//this = newState;
					}
					
				}else if (board[row][column - 1] == 0){ //left
					if (op == MOVELEFT){
						parent = this;
						MOVELEFT = op;
						newState = new SimplePuzzleState();
						//this = newState
					}
				}else if (board[row - 1][column] == 0){  //up
					if (op == MOVEUP){
						parent = this;
						MOVEUP = op;
						newState = new SimplePuzzleState();
						//this = newState;
					}
				}else if (board[row + 1][column] == 0){  //down
					if (op == MOVEDOWN){
						parent = this;
						MOVEDOWN = op;
						newState = new SimplePuzzleState();
						//this = newState;
					}
				}else{   //anything else;
					return null;
				}	
			}
		}
		pathLength += 1;
		return newState;
	}

	@Override
	public PuzzleState flip(int startRow, int startColumn, int endRow, int endColumn) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public PuzzleState shuffleBoard(int pathLength) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isEmpty(int row, int column) {
		// TODO Auto-generated method stub
		if (board[row][column] == 0) {
		    return true;
		}else{
			return false;
		} 
	}

	@Override
	public PuzzleState getStateWithShortestPath() {
		// TODO Auto-generated method stub
		return null;
	}
	
    public boolean equals(SimplePuzzleState state){
		int row;
		int column;
		
		for (row = 0; row < dimension; row++){
			for(column = 0; column < dimension; column++){
				if (board[row][column] == state.board[row][column]){
					return true;
				}else{   
					return false;    //unnecessary;
				}
			}
		}
		return false;
	}
	
	public int hashCode(){
		return 0;
	}


}



